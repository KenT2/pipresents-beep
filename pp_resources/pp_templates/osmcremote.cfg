# This file in /pipresents/pp_resources/pp_templates may be overwritten by updates and is not used by Pi Presents
# copy the file to the pp_io_config directory of the profile that is to use it.

# There is no checking of the content of this file by Pi Presents, try any changes by
#  running from a terminal window so that any exceptions are reported

# USE
# ===
# This file binds linux generic input device key codes to the symbolic names of input events used by Pi Presents
# It also configures the input keys.

# It is designed to works with the official OSMC remote but might work with any generic input device

# DRIVER SECTION
# =============
# title - text which is reported on logs and error reports
# enabled -   yes/no a driver can be enabled/disabled using this so this file can be left in pp_io_config
# module = pp_inputdevicedriver the python module that implements this driver (without .py). More than one I/O config file can use the same driver.
# device-name - must contain the name of the input device. Run input_device.py to find this.
# tick-interval = 50 - Time in mS. between sampling of the keys.
# key-codes - A list of all the key codes that the device can produce. Obtain by running inputdevice.py.
#             If a key produces more than one code then list both and provide a key code section for each with all but one disabled.


# USING OTHER REMOTES OR DEVICES
# ==============================
# It may be possible to do this just by changing the list of key codes in the DRIVER section of this file
# but you may need to modify the name of the driver as well


# KEY CODE SECTIONS
# =================

#  A section for every key code listed in the DRIVER section must be present in the file
#  with a direction of in or none. A key code with direction = none is ignored.

#  Each key code can generate events having the specified symbolic name in any of four ways.
#  * button released  - An event with the symbolic name specified in 'released-name' is generated when a button is released
#  * button pressed  - An event with the symbolic name specified in 'pressed-name' is generated when a button is pressed
#  * button held down - An event with the symbolic name specified in 'down-name'is generated at 'repeat' tick intervals while button is pressed
#  * button held up - An event with the symbolic name specified in 'up-name'is generated at 'repeat' tick intervals while the button is released (not useful!)

# If you do not want one of the event types to be generated leave the symbolic name blank


# Example of an unused key code
# [KEY_HOME]
# direction = none 


# Example of a used key code 

# [KEY_STOP]            # key code which you can obtain using input_device.py
# direction =  in       # must be in
# released-name =       # the symbolic name for a button release
# pressed-name =  pp-stop     # the symbolic name for a button press
# up-name =         # symbolic name for an up state event
# down-name =        # symbolic name for a down state event
# repeat =           # state repeat interval (tick-interval intervals)


# THIS TEMPLATE
# =============

# The templates and examples of Pi Presents bind the following symbolic names to commands used by mediashow, liveshow and menu and to the special shutdown command.
# So that the OSMC remote can be used with the examples these symbolic names are assigned to its key codes in this file.
# You will want to modify them for your remote:

# command    symbolic name    key
#   -        pp-shutdownnow   KEY_HOME - initiates shutdown (special symbolic name used by core of Pi Presents)
#   down     pp-down          KEY_DOWN - move down a menu or next track in a mediashow
#   up       pp-up            KEY_UP - move up a menu or previous track in a mediashow
#   play     pp-play          KEY_ENTER - start playing a menu track 
#   pause    pp-pause         KEY_PLAYPAUSE - toggle pause in relevent tracks
#   stop      pp-stop          KEY_STOP - stop tracks and shows


# Other symbolic names for inputs can be defined in profiles and used in hyperlinkshows and radiobuttonshows:
# also for start-trigger, end-trigger and next-trigger in mediashows


# THE REAL STUFF
# -----------------

[DRIVER]
title = OSMC Remote
enabled = yes
device-name= HBGIC Technology Co., Ltd. USB Keyboard Mouse
key-codes= KEY_STOP,KEY_PLAYPAUSE,KEY_DOWN,KEY_UP,KEY_LEFT,KEY_RIGHT,KEY_ENTER,KEY_REWIND,KEY_FASTFORWARD,KEY_BACK,KEY_CONTEXT_MENU,KEY_HOME,KEY_INFO
tick-interval = 50
module= pp_inputdevicedriver

[KEY_STOP]
direction = in
released-name =
pressed-name = pp-stop
up-name = 
down-name = 
repeat = 


[KEY_PLAYPAUSE]
direction = in
released-name =
pressed-name = pp-pause
up-name = 
down-name = 
repeat = 

[KEY_DOWN]
direction = in
released-name =
pressed-name = pp-down
up-name = 
down-name = 
repeat = 

[KEY_RIGHT]
direction = in
released-name =
pressed-name = pp-down
up-name = 
down-name = 
repeat = 

[KEY_LEFT]
direction = in
released-name =
pressed-name = pp-up
up-name = 
down-name = 
repeat = 

[KEY_UP]
direction = in
released-name =
pressed-name = pp-up
up-name = 
down-name = 
repeat = 

[KEY_ENTER]
direction = in
released-name =
pressed-name = pp-play
up-name =
down-name =
repeat =

[KEY_REWIND]
direction = none

[KEY_FASTFORWARD]
direction = none 

[KEY_BACK]
direction = none

[KEY_CONTEXT_MENU]
direction = none

[KEY_HOME]
direction = in
released-name =
pressed-name =
up-name =
down-name = pp-shutdownnow
repeat = 100

[KEY_INFO]
direction = none


